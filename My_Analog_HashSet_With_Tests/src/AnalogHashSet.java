public class AnalogHashSet {
    private HashNode[] nodes = new HashNode[10_000_000]; //обьявляем новый массив типа класа ХешУзел размером в 1_000_000
    // элементов (абстрактное число для вставки новых элементов по индексу, кот. определяется путем суммирования символов из
    // которых состоит новый вставляемый элемент) - условно наша ХешТаблица
    private int size = 0; //обьявляем поле класса - размер нашей ХэшТаблици

    public AnalogHashSet() { //конструктор класса
        for (int i = 0; i < nodes.length; i++) { //каждый элемент массива будет = новому обьекту с поведением класса ХешУзел
            nodes[i] = new HashNode();
        }
    }
    public int returnIndex(String value) { //метод для возврата индекса по значению элемента
        int index = 0; //обьявляем переменную - индекс нашего нового элемента
        char[] arrayElements = value.toCharArray(); //создаем массив символов, кот. разбивает новый элемент на символы
        for (char i = 0; i < arrayElements.length; i++) { //проходимся по каждому символу нового элемента по возрастанию
            index += arrayElements[i]; //суммируем значение каждого символа в переменную index
        }
        return index; //вернуть значение переменной индекс
    }
    public boolean add(String value) { //метод для добавления нового элемента в нашу ХешТаблицу
        int ind = returnIndex(value); //создаем переменную и присваиваем ей значение = вызвать метод вернутьИндекс по значению
        if (contains(value)) { //проверяем, если новый элемент для добавления в ХешТаблицу уже присутствует, то
            return false; //мы не добавляем его
        }
        HashNode node = new HashNode(value, null);//создаем новый обьект типа и поведения класса ХешУзел со значением
        // наш новый элемент для вставки (строковая переменная) с нулевой ссылкой на следующий ХешУзел

        if (nodes[ind].getNext() == null) { //если наша ХешТаблица пустая, то
            nodes[ind].setNext(node); //вставляем ссылку на наш ХешУзел напрямую в ХешТаблицу
        } else { //иначе
            node.setNext(nodes[ind].getNext()); //вставляем с помощью метода установить в начало
            nodes[ind].setNext(node);
        }
        size++; //увеличиваем размер ХешТаблицы на 1
        return true; //вернуть истина - добавить элемент
    }

    public boolean remove(String value) { //метод для удаления элемента из нашей ХешТаблицы по значению элемента
        if (!contains(value)) { //если удаляемый элемент отсутствует в ХешТаблице, то
            return false; //ничего не делаем
        }
        int ind = returnIndex(value); //создаем переменную и присваиваем ей значение = вызвать метод вернутьИндекс по значению
        HashNode node = nodes[ind]; //создаем ссыл.переменную узел типа ХешУзел = элементу ХешТаблицы под индексом ind
        HashNode node2 = node.getNext(); //создаем ссыл.переменную узел2 = ссылке на след.элемент от переменной узел
        while (node2 != null) { //создаем цикл - пока ссыл.переменная узел2 на следующий элемент НЕпустая
            if (node2.getMsg().equals(value)) { //если значение ссыл.перем. узел2 эквивалетно значению добавляемого элемента, то
                node.setNext(node2.getNext()); //ссыл.перем. узел установить ссылку-указатель на узел2
                size--; //уменьшаем размер ХешТаблицы на 1
                break; //выходим из цикла
            }
            node = node.getNext(); //ссыл.перем. узел присваиваем значение = узел.получить ссылку на след.элемент
            node2 = node.getNext(); //ссыл.перем. узел2 присваиваем значение = узел.получить ссылку на след.элемент
        }
        return true; //вернуть истина
    }

    public void print() { //метод для вывода содержимого ХешТаблицы в консоль
        for (int i = 0; i < nodes.length; i++) { //проходимся циклом по ХешТаблице по возрастанию
            HashNode node = nodes[i].getNext(); //создаем узел типа класс ХешУзел = каждый элемент ХешТаблицы.получить ссылку
            // на след.элемент

            if (node != null) { //если узел не пустой, то
                System.out.print(i + ": "); //печатаем индекс элемента + двоеточие
                System.out.print(node.getMsg()); //печатаем узел.получитьЗначение()
                // node = node.getNext();
            } else { //иначе
                continue; //прекращаем итерацию цикла, чтоб наша ХешТаблица не выводила пустые строки
            }
            System.out.println(); //разделитель с новой строки
        }
    }

    public int size() { //метод возвращает размер ХешТаблицы
        return size; //вернуть значение переменной-поля класса size
    }

    public boolean contains(String value) { //метод для сравнения элементов по значению
        int ind = returnIndex(value); //создаем переменную и присваиваем ей значение = вызвать метод вернутьИндекс по значению
        HashNode node = nodes[ind].getNext(); //создаем узел типа класс ХешУзел = каждый элемент ХешТаблицы.получить ссылку
        // на след.элемент

        while (node != null) { //создаем цикл - пока ссыл.переменная узел на следующий элемент НЕпустая
            if (node.getMsg().equals(value) && node.getMsg().charAt(0) == value.charAt(0)) { //если значение узла эквивалентно
                // значению для сравнения и первые символы элементов равны, то
                return true; //возвращаем истина
            }
            node = node.getNext(); //узлу присваиваем значение = получитьл ссылку на след.элемент

        }
        return false; //вернуть ложь
    }
}